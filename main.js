/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var Ne=Object.create;var C=Object.defineProperty;var $e=Object.getOwnPropertyDescriptor;var We=Object.getOwnPropertyNames;var Ve=Object.getPrototypeOf,Me=Object.prototype.hasOwnProperty;var _=(s,o)=>()=>(o||s((o={exports:{}}).exports,o),o.exports),Ke=(s,o)=>{for(var e in o)C(s,e,{get:o[e],enumerable:!0})},Z=(s,o,e,r)=>{if(o&&typeof o=="object"||typeof o=="function")for(let t of We(o))!Me.call(s,t)&&t!==e&&C(s,t,{get:()=>o[t],enumerable:!(r=$e(o,t))||r.enumerable});return s};var q=(s,o,e)=>(e=s!=null?Ne(Ve(s)):{},Z(o||!s||!s.__esModule?C(e,"default",{value:s,enumerable:!0}):e,s)),ze=s=>Z(C({},"__esModule",{value:!0}),s);var se=_(($s,ee)=>{ee.exports=Q;function Q(s,o,e,r){if(typeof e!="function")throw new Error("method for before hook must be a function");return r||(r={}),Array.isArray(o)?o.reverse().reduce(function(t,i){return Q.bind(null,s,i,t,r)},e)():Promise.resolve().then(function(){return s.registry[o]?s.registry[o].reduce(function(t,i){return i.hook.bind(null,t,r)},e)():e(r)})}});var te=_((Ws,re)=>{re.exports=Je;function Je(s,o,e,r){var t=r;s.registry[e]||(s.registry[e]=[]),o==="before"&&(r=function(i,n){return Promise.resolve().then(t.bind(null,n)).then(i.bind(null,n))}),o==="after"&&(r=function(i,n){var a;return Promise.resolve().then(i.bind(null,n)).then(function(c){return a=c,t(a,n)}).then(function(){return a})}),o==="error"&&(r=function(i,n){return Promise.resolve().then(i.bind(null,n)).catch(function(a){return t(a,n)})}),s.registry[e].push({hook:r,orig:t})}});var ne=_((Vs,oe)=>{oe.exports=Xe;function Xe(s,o,e){if(s.registry[o]){var r=s.registry[o].map(function(t){return t.orig}).indexOf(e);r!==-1&&s.registry[o].splice(r,1)}}});var ge=_((Ms,S)=>{var pe=se(),Ye=te(),Ze=ne(),ie=Function.bind,ae=ie.bind(ie);function le(s,o,e){var r=ae(Ze,null).apply(null,e?[o,e]:[o]);s.api={remove:r},s.remove=r,["before","error","after","wrap"].forEach(function(t){var i=e?[o,t,e]:[o,t];s[t]=s.api[t]=ae(Ye,null).apply(null,i)})}function Qe(){var s="h",o={registry:{}},e=pe.bind(null,o,s);return le(e,o,s),e}function ue(){var s={registry:{}},o=pe.bind(null,s);return le(o,s),o}var ce=!1;function G(){return ce||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),ce=!0),ue()}G.Singular=Qe.bind();G.Collection=ue.bind();S.exports=G;S.exports.Hook=G;S.exports.Singular=G.Singular;S.exports.Collection=G.Collection});var Ge=_((v,fe)=>{"use strict";var gs=function(){if(typeof self!="undefined")return self;if(typeof window!="undefined")return window;if(typeof global!="undefined")return global;throw new Error("unable to locate global object")},f=gs();fe.exports=v=f.fetch;f.fetch&&(v.default=f.fetch.bind(f));v.Headers=f.Headers;v.Request=f.Request;v.Response=f.Response});var ve=_((Zs,ye)=>{ye.exports=ke;function ke(s,o){if(s&&o)return ke(s)(o);if(typeof s!="function")throw new TypeError("need wrapper function");return Object.keys(s).forEach(function(r){e[r]=s[r]}),e;function e(){for(var r=new Array(arguments.length),t=0;t<r.length;t++)r[t]=arguments[t];var i=s.apply(this,r),n=r[r.length-1];return typeof i=="function"&&i!==n&&Object.keys(n).forEach(function(a){i[a]=n[a]}),i}}});var Ae=_((Qs,B)=>{var Pe=ve();B.exports=Pe(L);B.exports.strict=Pe(Se);L.proto=L(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return L(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return Se(this)},configurable:!0})});function L(s){var o=function(){return o.called?o.value:(o.called=!0,o.value=s.apply(this,arguments))};return o.called=!1,o}function Se(s){var o=function(){if(o.called)throw new Error(o.onceError);return o.called=!0,o.value=s.apply(this,arguments)},e=s.name||"Function wrapped with `once`";return o.onceError=e+" shouldn't be called more than once",o.called=!1,o}});var js={};Ke(js,{default:()=>x});module.exports=ze(js);var p=require("obsidian");function T(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}var De=q(ge());function de(s){return Object.prototype.toString.call(s)==="[object Object]"}function D(s){var o,e;return de(s)===!1?!1:(o=s.constructor,o===void 0?!0:(e=o.prototype,!(de(e)===!1||e.hasOwnProperty("isPrototypeOf")===!1)))}function es(s){return s?Object.keys(s).reduce((o,e)=>(o[e.toLowerCase()]=s[e],o),{}):{}}function Te(s,o){let e=Object.assign({},s);return Object.keys(o).forEach(r=>{D(o[r])?r in s?e[r]=Te(s[r],o[r]):Object.assign(e,{[r]:o[r]}):Object.assign(e,{[r]:o[r]})}),e}function me(s){for(let o in s)s[o]===void 0&&delete s[o];return s}function j(s,o,e){if(typeof o=="string"){let[t,i]=o.split(" ");e=Object.assign(i?{method:t,url:i}:{url:t},e)}else e=Object.assign({},o);e.headers=es(e.headers),me(e),me(e.headers);let r=Te(s||{},e);return s&&s.mediaType.previews.length&&(r.mediaType.previews=s.mediaType.previews.filter(t=>!r.mediaType.previews.includes(t)).concat(r.mediaType.previews)),r.mediaType.previews=r.mediaType.previews.map(t=>t.replace(/-preview/,"")),r}function ss(s,o){let e=/\?/.test(s)?"&":"?",r=Object.keys(o);return r.length===0?s:s+e+r.map(t=>t==="q"?"q="+o.q.split("+").map(encodeURIComponent).join("+"):`${t}=${encodeURIComponent(o[t])}`).join("&")}var rs=/\{[^}]+\}/g;function ts(s){return s.replace(/^\W+|\W+$/g,"").split(/,/)}function os(s){let o=s.match(rs);return o?o.map(ts).reduce((e,r)=>e.concat(r),[]):[]}function he(s,o){return Object.keys(s).filter(e=>!o.includes(e)).reduce((e,r)=>(e[r]=s[r],e),{})}function Ee(s){return s.split(/(%[0-9A-Fa-f]{2})/g).map(function(o){return/%[0-9A-Fa-f]/.test(o)||(o=encodeURI(o).replace(/%5B/g,"[").replace(/%5D/g,"]")),o}).join("")}function y(s){return encodeURIComponent(s).replace(/[!'()*]/g,function(o){return"%"+o.charCodeAt(0).toString(16).toUpperCase()})}function A(s,o,e){return o=s==="+"||s==="#"?Ee(o):y(o),e?y(e)+"="+o:o}function k(s){return s!=null}function H(s){return s===";"||s==="&"||s==="?"}function ns(s,o,e,r){var t=s[e],i=[];if(k(t)&&t!=="")if(typeof t=="string"||typeof t=="number"||typeof t=="boolean")t=t.toString(),r&&r!=="*"&&(t=t.substring(0,parseInt(r,10))),i.push(A(o,t,H(o)?e:""));else if(r==="*")Array.isArray(t)?t.filter(k).forEach(function(n){i.push(A(o,n,H(o)?e:""))}):Object.keys(t).forEach(function(n){k(t[n])&&i.push(A(o,t[n],n))});else{let n=[];Array.isArray(t)?t.filter(k).forEach(function(a){n.push(A(o,a))}):Object.keys(t).forEach(function(a){k(t[a])&&(n.push(y(a)),n.push(A(o,t[a].toString())))}),H(o)?i.push(y(e)+"="+n.join(",")):n.length!==0&&i.push(n.join(","))}else o===";"?k(t)&&i.push(y(e)):t===""&&(o==="&"||o==="?")?i.push(y(e)+"="):t===""&&i.push("");return i}function is(s){return{expand:as.bind(null,s)}}function as(s,o){var e=["+","#",".","/",";","?","&"];return s.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(r,t,i){if(t){let a="",c=[];if(e.indexOf(t.charAt(0))!==-1&&(a=t.charAt(0),t=t.substr(1)),t.split(/,/g).forEach(function(l){var u=/([^:\*]*)(?::(\d+)|(\*))?/.exec(l);c.push(ns(o,a,u[1],u[2]||u[3]))}),a&&a!=="+"){var n=",";return a==="?"?n="&":a!=="#"&&(n=a),(c.length!==0?a:"")+c.join(n)}else return c.join(",")}else return Ee(i)})}function be(s){let o=s.method.toUpperCase(),e=(s.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),r=Object.assign({},s.headers),t,i=he(s,["method","baseUrl","url","headers","request","mediaType"]),n=os(e);e=is(e).expand(i),/^http/.test(e)||(e=s.baseUrl+e);let a=Object.keys(s).filter(u=>n.includes(u)).concat("baseUrl"),c=he(i,a);if(!/application\/octet-stream/i.test(r.accept)&&(s.mediaType.format&&(r.accept=r.accept.split(/,/).map(u=>u.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${s.mediaType.format}`)).join(",")),s.mediaType.previews.length)){let u=r.accept.match(/[\w-]+(?=-preview)/g)||[];r.accept=u.concat(s.mediaType.previews).map(g=>{let d=s.mediaType.format?`.${s.mediaType.format}`:"+json";return`application/vnd.github.${g}-preview${d}`}).join(",")}return["GET","HEAD"].includes(o)?e=ss(e,c):"data"in c?t=c.data:Object.keys(c).length&&(t=c),!r["content-type"]&&typeof t!="undefined"&&(r["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(o)&&typeof t=="undefined"&&(t=""),Object.assign({method:o,url:e,headers:r},typeof t!="undefined"?{body:t}:null,s.request?{request:s.request}:null)}function cs(s,o,e){return be(j(s,o,e))}function we(s,o){let e=j(s,o),r=cs.bind(null,e);return Object.assign(r,{DEFAULTS:e,defaults:we.bind(null,e),merge:j.bind(null,e),parse:be})}var ps="7.0.6",ls=`octokit-endpoint.js/${ps} ${T()}`,us={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":ls},mediaType:{format:"",previews:[]}},_e=we(null,us);var Re=q(Ge());var F=class extends Error{constructor(o){super(o),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}};var N=q(Ae()),ds=(0,N.default)(s=>console.warn(s)),ms=(0,N.default)(s=>console.warn(s)),E=class extends Error{constructor(o,e,r){super(o),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=e;let t;"headers"in r&&typeof r.headers!="undefined"&&(t=r.headers),"response"in r&&(this.response=r.response,t=r.response.headers);let i=Object.assign({},r.request);r.request.headers.authorization&&(i.headers=Object.assign({},r.request.headers,{authorization:r.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),i.url=i.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=i,Object.defineProperty(this,"code",{get(){return ds(new F("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),e}}),Object.defineProperty(this,"headers",{get(){return ms(new F("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),t||{}}})}};var hs="6.2.8";function Ts(s){return s.arrayBuffer()}function Fe(s){let o=s.request&&s.request.log?s.request.log:console;(D(s.body)||Array.isArray(s.body))&&(s.body=JSON.stringify(s.body));let e={},r,t;return(s.request&&s.request.fetch||globalThis.fetch||Re.default)(s.url,Object.assign({method:s.method,body:s.body,headers:s.headers,redirect:s.redirect,...s.body&&{duplex:"half"}},s.request)).then(async n=>{t=n.url,r=n.status;for(let a of n.headers)e[a[0]]=a[1];if("deprecation"in e){let a=e.link&&e.link.match(/<([^>]+)>; rel="deprecation"/),c=a&&a.pop();o.warn(`[@octokit/request] "${s.method} ${s.url}" is deprecated. It is scheduled to be removed on ${e.sunset}${c?`. See ${c}`:""}`)}if(!(r===204||r===205)){if(s.method==="HEAD"){if(r<400)return;throw new E(n.statusText,r,{response:{url:t,status:r,headers:e,data:void 0},request:s})}if(r===304)throw new E("Not modified",r,{response:{url:t,status:r,headers:e,data:await $(n)},request:s});if(r>=400){let a=await $(n);throw new E(Es(a),r,{response:{url:t,status:r,headers:e,data:a},request:s})}return $(n)}}).then(n=>({status:r,url:t,headers:e,data:n})).catch(n=>{throw n instanceof E||n.name==="AbortError"?n:new E(n.message,500,{request:s})})}async function $(s){let o=s.headers.get("content-type");return/application\/json/.test(o)?s.json():!o||/^text\/|charset=utf-8$/.test(o)?s.text():Ts(s)}function Es(s){return typeof s=="string"?s:"message"in s?Array.isArray(s.errors)?`${s.message}: ${s.errors.map(JSON.stringify).join(", ")}`:s.message:`Unknown error: ${JSON.stringify(s)}`}function W(s,o){let e=s.defaults(o);return Object.assign(function(t,i){let n=e.merge(t,i);if(!n.request||!n.request.hook)return Fe(e.parse(n));let a=(c,l)=>Fe(e.parse(e.merge(c,l)));return Object.assign(a,{endpoint:e,defaults:W.bind(null,e)}),n.request.hook(a,n)},{endpoint:e,defaults:W.bind(null,e)})}var R=W(_e,{headers:{"user-agent":`octokit-request.js/${hs} ${T()}`}});var bs="5.0.6";function ws(s){return`Request failed due to following response errors:
`+s.errors.map(o=>` - ${o.message}`).join(`
`)}var _s=class extends Error{constructor(s,o,e){super(ws(e)),this.request=s,this.headers=o,this.response=e,this.name="GraphqlResponseError",this.errors=e.errors,this.data=e.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},fs=["method","baseUrl","url","headers","request","query","mediaType"],Gs=["query","method","url"],Oe=/\/api\/v3\/?$/;function ks(s,o,e){if(e){if(typeof o=="string"&&"query"in e)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(let n in e)if(Gs.includes(n))return Promise.reject(new Error(`[@octokit/graphql] "${n}" cannot be used as variable name`))}let r=typeof o=="string"?Object.assign({query:o},e):o,t=Object.keys(r).reduce((n,a)=>fs.includes(a)?(n[a]=r[a],n):(n.variables||(n.variables={}),n.variables[a]=r[a],n),{}),i=r.baseUrl||s.endpoint.DEFAULTS.baseUrl;return Oe.test(i)&&(t.url=i.replace(Oe,"/api/graphql")),s(t).then(n=>{if(n.data.errors){let a={};for(let c of Object.keys(n.headers))a[c]=n.headers[c];throw new _s(t,a,n.data)}return n.data.data})}function V(s,o){let e=s.defaults(o);return Object.assign((t,i)=>ks(e,t,i),{defaults:V.bind(null,e),endpoint:e.endpoint})}var pr=V(R,{headers:{"user-agent":`octokit-graphql.js/${bs} ${T()}`},method:"POST",url:"/graphql"});function Ue(s){return V(s,{method:"POST",url:"/graphql"})}var ys=/^v1\./,vs=/^ghs_/,Ps=/^ghu_/;async function Ss(s){let o=s.split(/\./).length===3,e=ys.test(s)||vs.test(s),r=Ps.test(s);return{type:"token",token:s,tokenType:o?"app":e?"installation":r?"user-to-server":"oauth"}}function As(s){return s.split(/\./).length===3?`bearer ${s}`:`token ${s}`}async function Fs(s,o,e,r){let t=o.endpoint.merge(e,r);return t.headers.authorization=As(s),o(t)}var Ce=function(o){if(!o)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof o!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return o=o.replace(/^(token|bearer) +/i,""),Object.assign(Ss.bind(null,o),{hook:Fs.bind(null,o)})};var Le="4.2.4",I=class{static defaults(s){return class extends this{constructor(...e){let r=e[0]||{};if(typeof s=="function"){super(s(r));return}super(Object.assign({},s,r,r.userAgent&&s.userAgent?{userAgent:`${r.userAgent} ${s.userAgent}`}:null))}}}static plugin(...s){var o;let e=this.plugins;return o=class extends this{},o.plugins=e.concat(s.filter(t=>!e.includes(t))),o}constructor(s={}){let o=new De.Collection,e={baseUrl:R.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},s.request,{hook:o.bind(null,"request")}),mediaType:{previews:[],format:""}};if(e.headers["user-agent"]=[s.userAgent,`octokit-core.js/${Le} ${T()}`].filter(Boolean).join(" "),s.baseUrl&&(e.baseUrl=s.baseUrl),s.previews&&(e.mediaType.previews=s.previews),s.timeZone&&(e.headers["time-zone"]=s.timeZone),this.request=R.defaults(e),this.graphql=Ue(this.request).defaults(e),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},s.log),this.hook=o,s.authStrategy){let{authStrategy:t,...i}=s,n=t(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:i},s.auth));o.wrap("request",n.hook),this.auth=n}else if(!s.auth)this.auth=async()=>({type:"unauthenticated"});else{let t=Ce(s.auth);o.wrap("request",t.hook),this.auth=t}this.constructor.plugins.forEach(t=>{Object.assign(this,t(this,s))})}};I.VERSION=Le;I.plugins=[];var Rs="1.0.4";function M(s){s.hook.wrap("request",(o,e)=>{s.log.debug("request",e);let r=Date.now(),t=s.request.endpoint.parse(e),i=t.url.replace(e.baseUrl,"");return o(e).then(n=>(s.log.info(`${t.method} ${i} - ${n.status} in ${Date.now()-r}ms`),n)).catch(n=>{throw s.log.info(`${t.method} ${i} - ${n.status} in ${Date.now()-r}ms`),n})})}M.VERSION=Rs;var Os="6.1.2";function Us(s){if(!s.data)return{...s,data:[]};if(!("total_count"in s.data&&!("url"in s.data)))return s;let e=s.data.incomplete_results,r=s.data.repository_selection,t=s.data.total_count;delete s.data.incomplete_results,delete s.data.repository_selection,delete s.data.total_count;let i=Object.keys(s.data)[0],n=s.data[i];return s.data=n,typeof e!="undefined"&&(s.data.incomplete_results=e),typeof r!="undefined"&&(s.data.repository_selection=r),s.data.total_count=t,s}function K(s,o,e){let r=typeof o=="function"?o.endpoint(e):s.request.endpoint(o,e),t=typeof o=="function"?o:s.request,i=r.method,n=r.headers,a=r.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{let c=await t({method:i,url:a,headers:n}),l=Us(c);return a=((l.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:l}}catch(c){if(c.status!==409)throw c;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function Ie(s,o,e,r){return typeof e=="function"&&(r=e,e=void 0),xe(s,[],K(s,o,e)[Symbol.asyncIterator](),r)}function xe(s,o,e,r){return e.next().then(t=>{if(t.done)return o;let i=!1;function n(){i=!0}return o=o.concat(r?r(t.value,n):t.value.data),i?o:xe(s,o,e,r)})}var kr=Object.assign(Ie,{iterator:K});function z(s){return{paginate:Object.assign(Ie.bind(null,s),{iterator:K.bind(null,s)})}}z.VERSION=Os;var qe="7.2.3",Cs={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],addSelectedRepoToRequiredWorkflow:["PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repositories/{repository_id}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createRequiredWorkflow:["POST /orgs/{org}/actions/required_workflows"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteRequiredWorkflow:["DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getEnvironmentPublicKey:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoRequiredWorkflow:["GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}"],getRepoRequiredWorkflowUsage:["GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getRequiredWorkflow:["GET /orgs/{org}/actions/required_workflows/{required_workflow_id}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repositories/{repository_id}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoRequiredWorkflows:["GET /repos/{org}/{repo}/actions/required_workflows"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRequiredWorkflowRuns:["GET /repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs"],listRequiredWorkflows:["GET /orgs/{org}/actions/required_workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelectedRepositoriesRequiredWorkflow:["GET /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],removeSelectedRepoFromRequiredWorkflow:["DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedReposToRequiredWorkflow:["PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"],updateRequiredWorkflow:["PATCH /orgs/{org}/actions/required_workflows/{required_workflow_id}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteCodespacesBillingUsers:["DELETE /orgs/{org}/codespaces/billing/selected_users"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setCodespacesBilling:["PUT /orgs/{org}/codespaces/billing"],setCodespacesBillingUsers:["POST /orgs/{org}/codespaces/billing/selected_users"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportStatus:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /organizations/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /organizations/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /organizations/{org}/personal-access-token-requests"],listPatGrants:["GET /organizations/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /organizations/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /organizations/{org}/personal-access-token-requests"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /organizations/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /organizations/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployment"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disableLfsForRepo:["DELETE /repos/{owner}/{repo}/lfs"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enableLfsForRepo:["PUT /repos/{owner}/{repo}/lfs"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},Ds=Cs,O=new Map;for(let[s,o]of Object.entries(Ds))for(let[e,r]of Object.entries(o)){let[t,i,n]=r,[a,c]=t.split(/ /),l=Object.assign({method:a,url:c},i);O.has(s)||O.set(s,new Map),O.get(s).set(e,{scope:s,methodName:e,endpointDefaults:l,decorations:n})}var Ls={get({octokit:s,scope:o,cache:e},r){if(e[r])return e[r];let{decorations:t,endpointDefaults:i}=O.get(o).get(r);return t?e[r]=Is(s,o,r,i,t):e[r]=s.request.defaults(i),e[r]}};function He(s){let o={};for(let e of O.keys())o[e]=new Proxy({octokit:s,scope:e,cache:{}},Ls);return o}function Is(s,o,e,r,t){let i=s.request.defaults(r);function n(...a){let c=i.endpoint.merge(...a);if(t.mapToData)return c=Object.assign({},c,{data:c[t.mapToData],[t.mapToData]:void 0}),i(c);if(t.renamed){let[l,u]=t.renamed;s.log.warn(`octokit.${o}.${e}() has been renamed to octokit.${l}.${u}()`)}if(t.deprecated&&s.log.warn(t.deprecated),t.renamedParameters){let l=i.endpoint.merge(...a);for(let[u,g]of Object.entries(t.renamedParameters))u in l&&(s.log.warn(`"${u}" parameter is deprecated for "octokit.${o}.${e}()". Use "${g}" instead`),g in l||(l[g]=l[u]),delete l[u]);return i(l)}return i(...a)}return Object.assign(n,i)}function xs(s){return{rest:He(s)}}xs.VERSION=qe;function J(s){let o=He(s);return{...o,rest:o}}J.VERSION=qe;var qs="19.0.13",je=I.plugin(M,J,z).defaults({userAgent:`octokit-rest.js/${qs}`});var Hs={githubToken:"",githubUsername:"",githubRepo:"",publishFolder:"notes",excludeFolders:[],frontmatterKey:"share",publishedNotes:{},useFileHistory:!0,formatFilename:!1,languageSuffixKey:"lang",imagesFolder:"assets/images",processImages:!0},x=class extends p.Plugin{constructor(){super(...arguments);this.githubConnected=!1}async onload(){await this.loadSettings(),this.settings.githubToken&&(this.initOctokit(),await this.testGitHubConnection()),this.addRibbonIcon("upload-cloud","GitHub Publisher",r=>{new X(this.app,this).open()}).addClass("github-publisher-ribbon-class"),this.statusBar=this.addStatusBarItem(),this.updateStatusBar(),this.addCommand({id:"publish-current-note",name:"Publish current note to GitHub",checkCallback:r=>{let t=this.app.workspace.getActiveViewOfType(p.MarkdownView);return t&&t.file?(r||this.publishSingleNote(t.file),!0):!1}}),this.addCommand({id:"publish-all-shareable-notes",name:"Publish all shareable notes to GitHub",callback:()=>{this.publishAllNotes()}}),this.addSettingTab(new Y(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},Hs,await this.loadData())}async saveSettings(){await this.saveData(this.settings),this.settings.githubToken&&(this.initOctokit(),await this.testGitHubConnection()),this.updateStatusBar()}initOctokit(){this.octokit=new je({auth:this.settings.githubToken})}async testGitHubConnection(){if(!this.settings.githubToken||!this.settings.githubUsername||!this.settings.githubRepo)return this.githubConnected=!1,!1;try{return await this.octokit.repos.get({owner:this.settings.githubUsername,repo:this.settings.githubRepo}),this.githubConnected=!0,this.updateStatusBar(),!0}catch(e){return console.error("GitHub connection test failed:",e),this.githubConnected=!1,this.updateStatusBar(),!1}}updateStatusBar(){this.statusBar.empty();let e=this.statusBar.createSpan({cls:"github-publisher-status-text"});e.setText("GitHub Publisher: ");let r=this.statusBar.createSpan({cls:"github-publisher-status-icon"});this.githubConnected?((0,p.setIcon)(r,"check-circle"),r.addClass("github-publisher-connected"),e.setText("GitHub Publisher: Connected")):((0,p.setIcon)(r,"x-circle"),r.addClass("github-publisher-disconnected"),e.setText("GitHub Publisher: Disconnected"))}isNoteShareable(e){var t;if(e.extension!=="md"||this.isInExcludedFolder(e.path))return!1;let r=(t=this.app.metadataCache.getFileCache(e))==null?void 0:t.frontmatter;return r?r[this.settings.frontmatterKey]===!0:!1}isInExcludedFolder(e){return this.settings.excludeFolders.some(r=>e.startsWith(r+"/")||e===r)}getTargetPath(e){let r=e.name;this.settings.formatFilename&&(r=this.formatFilenameAsSlug(r));let t=this.getLanguageSuffix(e);return t&&(r=this.applyLanguageSuffix(r,t)),this.settings.publishFolder&&this.settings.publishFolder!=="/"?`${this.settings.publishFolder}/${r}`:r}async findPreviousNotePath(e,r){if(!this.settings.useFileHistory)return null;let t=this.calculateContentHash(r),i=Object.keys(this.settings.publishedNotes);for(let n of i)if(n!==e.path)try{let a=this.app.vault.getAbstractFileByPath(n);if(!a||!(a instanceof p.TFile)){let c=this.getStoredContentHash(n);if(c&&c===t)return n}}catch(a){}return null}calculateContentHash(e){let r=0;for(let t=0;t<e.length;t++){let i=e.charCodeAt(t);r=(r<<5)-r+i,r=r&r}return r.toString()}getStoredContentHash(e){let r=this.settings.publishedNotes[e];return r&&r.includes(":hash:")?r.split(":hash:")[1]:null}async markNoteAsPublished(e,r){let t=new Date().toISOString();this.settings.publishedNotes[e]=r?`${t}:hash:${r}`:t,await this.saveSettings()}async publishSingleNote(e){var r;if(!this.settings.githubToken||!this.settings.githubUsername||!this.settings.githubRepo){new p.Notice("Please configure GitHub settings in the plugin settings.");return}if(this.octokit||this.initOctokit(),!this.isNoteShareable(e)){new p.Notice(`Note ${e.name} is not shareable. Make sure it has '${this.settings.frontmatterKey}: true' in its frontmatter.`);return}try{let t=await this.app.vault.read(e),i=this.calculateContentHash(t);if(this.settings.processImages){let m=await this.processAndUploadImages(e,t);t=m.content,m.uploadedImages>0&&new p.Notice(`Uploaded ${m.uploadedImages} images to ${this.settings.imagesFolder}`)}let n=(r=this.app.metadataCache.getFileCache(e))==null?void 0:r.frontmatter,a="";n&&n.title?a=n.title:a=e.basename;let c="";n&&n.slug?c=n.slug+".md":c=this.formatFilenameAsSlug(a+".md");let l=e.name,u={...e,name:c},g=this.getTargetPath(u),d=null;this.settings.useFileHistory&&(d=await this.findPreviousNotePath(e,t));let h=this.btoa(t),b;try{let m=await this.octokit.repos.getContent({owner:this.settings.githubUsername,repo:this.settings.githubRepo,path:g});m.data&&!Array.isArray(m.data)&&(b=m.data.sha)}catch(m){if(d){let w=d.split("/"),Be=w[w.length-1],U=this.getTargetPath({name:Be||d});try{let P=await this.octokit.repos.getContent({owner:this.settings.githubUsername,repo:this.settings.githubRepo,path:U});P.data&&!Array.isArray(P.data)&&(await this.octokit.repos.deleteFile({owner:this.settings.githubUsername,repo:this.settings.githubRepo,path:U,message:`Delete ${U} (renamed to ${e.name})`,sha:P.data.sha}),new p.Notice(`Previous version at ${U} has been deleted.`),delete this.settings.publishedNotes[d],await this.saveSettings())}catch(P){console.log(`Could not delete previous file: ${P.message}`)}}}await this.octokit.repos.createOrUpdateFileContents({owner:this.settings.githubUsername,repo:this.settings.githubRepo,path:g,message:`Update ${e.name} via Obsidian Publisher`,content:h,sha:b}),await this.markNoteAsPublished(e.path,i),new p.Notice(`Successfully published ${e.name} to GitHub as ${g}!`)}catch(t){console.error("Error publishing note:",t),new p.Notice(`Failed to publish ${e.name}. Error: ${t.message}`)}}btoa(e){return Buffer.from(e).toString("base64")}async publishAllNotes(){if(!this.settings.githubToken||!this.settings.githubUsername||!this.settings.githubRepo){new p.Notice("Please configure GitHub settings in the plugin settings.");return}this.octokit||this.initOctokit();let r=this.app.vault.getMarkdownFiles().filter(n=>this.isNoteShareable(n));if(r.length===0){new p.Notice("No shareable notes found. Make sure notes have the frontmatter property set.");return}let t=0,i=0;new p.Notice(`Publishing ${r.length} notes to GitHub...`);for(let n of r)try{await this.publishSingleNote(n),t++}catch(a){console.error(`Error publishing ${n.name}:`,a),i++}new p.Notice(`Published ${t} notes to GitHub. ${i} failed.`)}formatFilenameAsSlug(e){if(!this.settings.formatFilename)return e;let r=e.replace(/\.md$/,"");return r=this.transliterateText(r),r=r.toLowerCase(),r=r.replace(/\s+/g,"-"),r=r.replace(/[^\w\-]/g,""),r+".md"}transliterateText(e){let r={\u00E7:"c",\u00C7:"C",\u011F:"g",\u011E:"G",\u0131:"i",\u0130:"I",\u00F6:"o",\u00D6:"O",\u015F:"s",\u015E:"S",\u00FC:"u",\u00DC:"U",\u00E2:"a",\u00C2:"A",\u00EE:"i",\u00CE:"I",\u00FB:"u",\u00DB:"U",\u00E9:"e",\u00C9:"E",\u00E8:"e",\u00C8:"E",\u00E0:"a",\u00C0:"A",\u00F1:"n",\u00D1:"N",\u00DF:"ss",\u00E5:"a",\u00C5:"A",\u00E4:"a",\u00C4:"A",\u00E6:"ae",\u00C6:"AE"};return e.replace(/[çÇğĞıİöÖşŞüÜâÂîÎûÛéÉèÈàÀñÑßåÅäÄæÆ]/g,t=>r[t]||t)}getLanguageSuffix(e){var t;let r=(t=this.app.metadataCache.getFileCache(e))==null?void 0:t.frontmatter;if(r&&this.settings.languageSuffixKey in r){let i=r[this.settings.languageSuffixKey];if(typeof i=="string"&&i.trim().length>0)return i.trim().toLowerCase()}return null}applyLanguageSuffix(e,r){return r?`${e.replace(/\.md$/,"")}.${r}.md`:e}extractImageLinks(e){let r=/!\[.*?\]\((.*?)\)/g,t=[],i;for(;(i=r.exec(e))!==null;)i[1]&&!i[1].startsWith("http")&&t.push(i[1]);return t}updateImagePathsInMarkdown(e,r){let t=e,i=/!\[.*?\]\((.*?)\)/g,n;for(;(n=i.exec(e))!==null;){let a=n[1];if(a in r){let c=n[0],l=r[a],u=c.replace(a,l);t=t.replace(c,u)}}return t}async processAndUploadImages(e,r){if(!this.settings.processImages)return{content:r,uploadedImages:0};let t=this.extractImageLinks(r);if(t.length===0)return{content:r,uploadedImages:0};let i={},n=0;for(let c of t)try{let l=this.app.vault.getAbstractFileByPath(c);if(l&&l instanceof p.TFile){let u=await this.app.vault.readBinary(l),g=Buffer.from(u).toString("base64"),d=c.split("/").pop()||c,h=`${this.settings.imagesFolder}/${d}`,b;try{let w=await this.octokit.repos.getContent({owner:this.settings.githubUsername,repo:this.settings.githubRepo,path:h});w.data&&!Array.isArray(w.data)&&(b=w.data.sha)}catch(w){}await this.octokit.repos.createOrUpdateFileContents({owner:this.settings.githubUsername,repo:this.settings.githubRepo,path:h,message:`Upload image ${d} via Obsidian Publisher`,content:g,sha:b});let m=`https://raw.githubusercontent.com/${this.settings.githubUsername}/${this.settings.githubRepo}/main`;i[c]=`${m}/${h}`,n++}}catch(l){console.error(`Error uploading image ${c}:`,l)}return{content:this.updateImagePathsInMarkdown(r,i),uploadedImages:n}}},X=class extends p.Modal{constructor(e,r){super(e);this.shareableFiles=[];this.plugin=r}async onOpen(){let{contentEl:e}=this;e.addClass("github-publisher-modal"),e.createEl("h2",{text:"GitHub Publisher - Publication Center"});let r=e.createDiv({cls:"github-publisher-connection-status"});if(this.plugin.githubConnected){r.addClass("github-publisher-connected-banner"),r.createSpan({text:"GitHub connection: "});let u=r.createSpan();(0,p.setIcon)(u,"check-circle"),r.createSpan({text:" Connected"})}else{r.addClass("github-publisher-disconnected-banner"),r.createSpan({text:"GitHub connection: "});let u=r.createSpan();(0,p.setIcon)(u,"x-circle"),r.createSpan({text:" Disconnected"})}if(!this.plugin.settings.githubToken||!this.plugin.settings.githubUsername||!this.plugin.settings.githubRepo){e.createEl("p",{text:"Please configure GitHub settings in the plugin settings before publishing.",cls:"github-publisher-warning"}),e.createEl("button",{text:"Open Settings",cls:"github-publisher-button"}).addEventListener("click",()=>{this.close(),this.app.setting.open(),this.app.setting.openTabById("github-publisher")});return}let t=e.createDiv({cls:"github-publisher-search-container"});t.createEl("span",{text:"Search notes: ",cls:"github-publisher-search-label"}),this.searchInput=t.createEl("input",{type:"text",cls:"github-publisher-search-input",attr:{placeholder:"Filter by title or path..."}});let i=e.createDiv({cls:"github-publisher-status"});i.createEl("p",{text:"Loading shareable notes..."});let n=this.app.vault.getMarkdownFiles();this.shareableFiles=n.filter(u=>this.plugin.isNoteShareable(u)),i.empty(),i.createEl("p",{text:`Found ${this.shareableFiles.length} shareable notes.`,cls:"github-publisher-status-text"});let c=e.createDiv({cls:"github-publisher-actions"}).createEl("button",{text:`Publish All Notes (${this.shareableFiles.length})`,cls:"github-publisher-button"});c.addEventListener("click",async()=>{c.disabled=!0,c.setText("Publishing..."),await this.plugin.publishAllNotes(),c.disabled=!1,c.setText(`Publish All Notes (${this.shareableFiles.length})`),this.updateNoteList()}),e.createEl("h3",{text:"Shareable Notes"});let l=e.createDiv({cls:"github-publisher-notes-list"});this.renderNoteList(l),this.searchInput.addEventListener("input",()=>{this.renderNoteList(l)})}renderNoteList(e){var i;e.empty();let r=((i=this.searchInput)==null?void 0:i.value.toLowerCase())||"",t=this.shareableFiles;if(r&&(t=this.shareableFiles.filter(n=>n.path.toLowerCase().includes(r)||n.name.toLowerCase().includes(r))),t.length===0)e.createEl("p",{text:r?`No matching notes found for "${r}".`:`No shareable notes found. Make sure notes have '${this.plugin.settings.frontmatterKey}: true' in frontmatter.`,cls:"github-publisher-empty"});else for(let n of t){let a=e.createDiv({cls:"github-publisher-note-item"}),c=n.path in this.plugin.settings.publishedNotes;if(c){let h=a.createDiv({cls:"github-publisher-note-status"});(0,p.setIcon)(h,"check"),h.addClass("github-publisher-published");let b=new Date(this.plugin.settings.publishedNotes[n.path]);h.setAttribute("title",`Last published: ${b.toLocaleString()}`)}let l=a.createDiv({cls:"github-publisher-note-info"});l.createEl("div",{text:n.name,cls:"github-publisher-note-title"}),l.createEl("div",{text:n.path,cls:"github-publisher-note-path"});let u=a.createDiv({cls:"github-publisher-note-actions"}),g=u.createEl("button",{text:c?"Update":"Publish",cls:"github-publisher-publish-button"}),d=u.createEl("button",{text:"Open",cls:"github-publisher-open-button"});g.addEventListener("click",async()=>{g.disabled=!0,g.setText("Publishing..."),await this.plugin.publishSingleNote(n),g.disabled=!1,g.setText(c?"Update":"Publish"),this.updateNoteList()}),d.addEventListener("click",()=>{this.app.workspace.getLeaf().openFile(n)})}}updateNoteList(){let e=this.contentEl.querySelector(".github-publisher-notes-list");e&&this.renderNoteList(e)}onClose(){let{contentEl:e}=this;e.empty()}},Y=class extends p.PluginSettingTab{constructor(e,r){super(e,r);this.plugin=r}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"GitHub Publisher Settings"}),e.createEl("h3",{text:"GitHub Authentication"}),this.connectionStatus=e.createDiv({cls:"github-publisher-connection-status setting-item"}),this.updateConnectionStatus(),new p.Setting(e).setName("GitHub Token").setDesc("Personal access token with repo permissions").addText(r=>r.setPlaceholder("ghp_xxxxxxxxxxxxxxxxxxxx").setValue(this.plugin.settings.githubToken).onChange(async t=>{this.plugin.settings.githubToken=t,await this.plugin.saveSettings(),this.updateConnectionStatus()})),new p.Setting(e).setName("GitHub Username").setDesc("Your GitHub username").addText(r=>r.setPlaceholder("username").setValue(this.plugin.settings.githubUsername).onChange(async t=>{this.plugin.settings.githubUsername=t,await this.plugin.saveSettings(),this.updateConnectionStatus()})),new p.Setting(e).setName("GitHub Repository").setDesc("The name of your GitHub repository").addText(r=>r.setPlaceholder("my-notes-repo").setValue(this.plugin.settings.githubRepo).onChange(async t=>{this.plugin.settings.githubRepo=t,await this.plugin.saveSettings(),this.updateConnectionStatus()})),new p.Setting(e).setName("Test GitHub Connection").setDesc("Test your GitHub credentials").addButton(r=>r.setButtonText("Test Connection").setCta().onClick(async()=>{r.setButtonText("Testing..."),r.setDisabled(!0),await this.plugin.testGitHubConnection()?new p.Notice("GitHub connection successful!"):new p.Notice("GitHub connection failed. Please check your settings."),this.updateConnectionStatus(),r.setButtonText("Test Connection"),r.setDisabled(!1)})),e.createEl("h3",{text:"Publishing Settings"}),new p.Setting(e).setName("Publish Folder").setDesc("The folder in your GitHub repository where notes will be published (leave empty for root)").addText(r=>r.setPlaceholder("notes").setValue(this.plugin.settings.publishFolder).onChange(async t=>{this.plugin.settings.publishFolder=t,await this.plugin.saveSettings()})),new p.Setting(e).setName("Keep Folder Structure").setDesc("If disabled, all notes will be published directly to the publish folder without maintaining their folder structure").addToggle(r=>r.setValue(!1).onChange(async t=>{new p.Notice(`Folder structure will ${t?"be kept":"not be kept"}`)})),new p.Setting(e).setName("Excluded Folders").setDesc("Folders to exclude from publishing (comma separated)").addText(r=>r.setPlaceholder("private, drafts, templates").setValue(this.plugin.settings.excludeFolders.join(", ")).onChange(async t=>{this.plugin.settings.excludeFolders=t.split(",").map(i=>i.trim()).filter(i=>i.length>0),await this.plugin.saveSettings()})),new p.Setting(e).setName("Frontmatter Key").setDesc("The frontmatter key that indicates a note should be shared (default: share)").addText(r=>r.setPlaceholder("share").setValue(this.plugin.settings.frontmatterKey).onChange(async t=>{this.plugin.settings.frontmatterKey=t||"share",await this.plugin.saveSettings()})),e.createEl("h3",{text:"Advanced Features"}),new p.Setting(e).setName("Track File History").setDesc("When enabled, the plugin will update existing files on GitHub when a note is renamed in Obsidian").addToggle(r=>r.setValue(this.plugin.settings.useFileHistory).onChange(async t=>{this.plugin.settings.useFileHistory=t,await this.plugin.saveSettings()})),new p.Setting(e).setName("URL-Friendly Filenames").setDesc("Convert filenames to a URL-friendly format (lowercase, hyphens instead of spaces, no special characters)").addToggle(r=>r.setValue(this.plugin.settings.formatFilename).onChange(async t=>{this.plugin.settings.formatFilename=t,await this.plugin.saveSettings()})),new p.Setting(e).setName("Language Suffix Key").setDesc('The frontmatter key used to specify language suffix (e.g., "en", "tr" to generate file.en.md)').addText(r=>r.setPlaceholder("lang").setValue(this.plugin.settings.languageSuffixKey).onChange(async t=>{this.plugin.settings.languageSuffixKey=t||"lang",await this.plugin.saveSettings()})),new p.Setting(e).setName("Process Images").setDesc("When enabled, images in notes will be uploaded to a separate folder on GitHub").addToggle(r=>r.setValue(this.plugin.settings.processImages).onChange(async t=>{this.plugin.settings.processImages=t,await this.plugin.saveSettings()})),new p.Setting(e).setName("Images Folder").setDesc("The folder in your GitHub repository where images will be uploaded").addText(r=>r.setPlaceholder("assets/images").setValue(this.plugin.settings.imagesFolder).onChange(async t=>{this.plugin.settings.imagesFolder=t||"assets/images",await this.plugin.saveSettings()})),new p.Setting(e).setName("Reset Published Notes History").setDesc("Clear the record of which notes have been published").addButton(r=>r.setButtonText("Reset").setWarning().onClick(async()=>{this.plugin.settings.publishedNotes={},await this.plugin.saveSettings(),new p.Notice("Published notes history has been reset.")}))}updateConnectionStatus(){if(this.connectionStatus.empty(),this.plugin.githubConnected){this.connectionStatus.addClass("github-publisher-connected-banner"),this.connectionStatus.removeClass("github-publisher-disconnected-banner");let e=this.connectionStatus.createSpan({text:"GitHub connection: "}),r=this.connectionStatus.createSpan();(0,p.setIcon)(r,"check-circle"),r.addClass("github-publisher-connected-icon"),this.connectionStatus.createSpan({text:" Connected"})}else{this.connectionStatus.addClass("github-publisher-disconnected-banner"),this.connectionStatus.removeClass("github-publisher-connected-banner");let e=this.connectionStatus.createSpan({text:"GitHub connection: "}),r=this.connectionStatus.createSpan();(0,p.setIcon)(r,"x-circle"),r.addClass("github-publisher-disconnected-icon"),this.connectionStatus.createSpan({text:" Disconnected"})}}};
/*! Bundled license information:

is-plain-object/dist/is-plain-object.mjs:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)
*/
